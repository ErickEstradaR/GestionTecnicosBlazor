@page "/Cliente"
@inject ClientesService ClientesService
@rendermode InteractiveServer

<PageTitle>Registro de clientes</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card header">
        </div>
        <div class="card-body">
            <h5 class="text-center">Consulta de clientes</h5>
            <div class="row">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="@Filtro">
                        <option value="" selected disabled>Elija una opci&oacute;n</option>
                        <option value="ClienteId">ClienteId</option>
                        <option value="Nombres">Nombres</option>
                    </InputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <div class="col-auto">
                            <button type="button" class="btn btn-outline-secondary bi bi-arrow-clockwise" @onclick="Restablecer"></button>
                        </div>
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar"/>
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                        <a href="/Cliente/Create" class="btn btn-success">
                            <span class="bi bi-plus-square"></span> Crear
                        </a>
                    </div>
                </div>
            </div>

            <table class="table table-hover">
                <thead class="table table-striped text-black">
                <tr>
                    <th>ClienteId</th>
                    <th>Nombres</th>
                    <th>T&eacute;cnico Encargado</th>
                    <th>Editar</th>
                    <th>Eliminar</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var cliente in ListaClientes)
                {
                <tr>
                    <td>@cliente.ClienteId</td>
                    <td>@cliente.Nombres</td>
                    <td>@cliente.Tecnico.Nombres</td>
                    <td class="text-center">
                        <a class="btn btn-outline-primary bi bi-pencil-square" href="/Cliente/Edit/@cliente.ClienteId"></a>
                    </td>
                    <td><a class="btn btn-outline-danger bi bi-trash" href="/Cliente/Delete/@cliente.ClienteId"></a></td>
                </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code
{
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
    
        ListaClientes = await ClientesService.Listar(c => c.ClienteId > 0);
    
    }
    
    @*Buscar técnicos según el filtro*@
    private async Task Buscar()
    {
        if (Filtro == "ClienteId")
        {
            if (int.TryParse(ValorFiltro, out int clienteId))
            {
                ListaClientes = await ClientesService
                    .Listar(c => c.ClienteId == clienteId);
            }

            
        }
        else if (ValorFiltro.Trim() != "" && Filtro == "Nombres")
        {
            ListaClientes = await ClientesService
                .Listar(t => t.Nombres.ToLower()
                    .Contains(ValorFiltro.ToLower()));
        }
    }
    private async Task Restablecer()
    {
        ListaClientes = await ClientesService.Listar(c=>c.ClienteId>0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }
    
    
    
}
