@page "/Cliente/Create"
@inject ClientesService ClientesService
@inject NavigationManager navigationManager
@inject TecnicosService TecnicosService


<PageTitle>Registro de clientes</PageTitle>
<EditForm Model="Cliente" OnSubmit="Guardar" FormName="Cliente">
    <DataAnnotationsValidator/>
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">
                    Registro de clientes
                </h5>
            </div>
            <div class="card-body">

                @*ClienteId*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>ClienteId</strong>
                    </label>
                    <InputNumber class="form-control" @bind-Value="Cliente.ClienteId" readonly/>
                </div>

                @*Nombres*@
                <div class="mb-3">
                    <label for="nombres">Nombres</label>
                    <InputText class="form-control" @bind-Value="Cliente.Nombres"/>
                    <ValidationMessage For="@(() => Cliente.Nombres)"/>
                </div>

                @*Dirección*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Direcci&oacute;n</strong>
                    </label>
                    <InputText class="form-control" @bind-Value="Cliente.Direccion"/>
                    </div>

                <div class="mb-3">
                    <label class="form-label">
                        <strong>RNC</strong>
                    </label>
                    <InputText class="form-control" @bind-Value="Cliente.Rnc"/>
                </div>

                <div class="mb-3">
                    <label class="form-label">
                        <strong>Limite crédito</strong>
                    </label>
                    <InputNumber class="form-control" @bind-Value="Cliente.LimiteCredito"/>
                </div>
                
                
                
                <div class="mb-3">
                    <label class="form-select">
                        <strong>T&eacute;cnico encargado</strong>
                    </label>
                    <InputSelect class="form-control form-select" @bind-Value ="@Tecnico.TecnicoId">
                        <option value="">Seleccione un T&eacute;cnico</option>
                        @foreach (var tecnico in ListaTecnicos)
                        {
                            <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                        }
                    </InputSelect>
                    
                </div>

                @*Footer*@
                <div class="card-footer mt-2 text-center">
                    <button type="submit" class="btn btn-outline-success" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" class="btn btn-primary bi bi-floppy">Guardar</button>
                    <a href="/Tecnico/" class="btn btn-secondary"><span class="bi bi-arrow-left"></span> Retroceder</a>
                </div>
            </div>
            </div>
        </div>
</EditForm>

@code
{


    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    @*Instanciar Cliente*@
    private Clientes Cliente { get; set; } = new Clientes();
    @*Lista de técnicos*@
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
    protected override async Task OnInitializedAsync()
    {

        ListaTecnicos = await TecnicosService.Listar(c => c.TecnicoId > 0);
    }
    
    
    @*Limpiar campos.*@
    public void Nuevo()
    {
        this.Cliente = new Clientes();
    }
    
    private async Task Guardar()
    {

        if (string.IsNullOrEmpty(Cliente.Nombres))
        {
            Console.WriteLine("El campo Nombres no puede estar vacío.");
            return;
        }

        var creado = await ClientesService.Guardar(Cliente);
        if (creado)
        {
            navigationManager.NavigateTo("/Cliente");
        }
    }
}
