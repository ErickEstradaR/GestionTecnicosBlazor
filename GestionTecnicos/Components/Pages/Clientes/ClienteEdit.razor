@page "/Cliente/Edit/{ClienteId:int}"
@inject ClientesService ClientesService
@inject TecnicosService TecnicosService
@inject NavigationManager navigationManager
@rendermode InteractiveServer


<PageTitle>Editar Cliente</PageTitle>
<div>
    @if (!string.IsNullOrEmpty(MensajeError))
    {
    <div class="alert alert-danger">@MensajeError</div>
    }
</div>
<EditForm Model="Cliente" OnValidSubmit="Modificar">
    <DataAnnotationsValidator/>
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">
                    Editar cliente
                </h5>
            </div>
            <div class="card-body">

                @*ClienteId*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>ClienteId</strong>
                    </label>
                    <InputNumber class="form-control" @bind-Value="Cliente.ClienteId" readonly/>
                </div>

                @*Nombres*@
                <div class="mb-3">
                    <label class="form-label"><strong>Nombres</strong></label>
                    <InputText class="form-control" @bind-Value="Cliente.Nombres"/>
                    <ValidationMessage For="@(() => Cliente.Nombres)"/>
                </div>

                @*Dirección*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Direcci&oacute;n</strong>
                    </label>
                    <InputText class="form-control" @bind-Value="Cliente.Direccion"/>
                </div>

                @*Fecha de Ingreso*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Fecha de Ingreso</strong>
                    </label>
                    <InputDate class="form-control" @bind-Value="Cliente.Fecha" readonly/>
                </div>

                @*Rnc*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>RNC</strong>
                    </label>
                    <InputText class="form-control" @bind-Value="Cliente.Rnc"/>
                    <ValidationMessage For="@(()=> Cliente.Rnc)"/>
                </div>
                
                @*Limite de Credito*@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>L&iacute;mite cr&eacute;dito</strong>
                    </label>
                    <InputNumber class="form-control" @bind-Value="Cliente.LimiteCredito"/>
                    <ValidationMessage For="@(()=>Cliente.LimiteCredito)"/>
                </div>


                @*Técnico Encargado*@
                <div class="mb-3">
                    <label>
                        <strong>T&eacute;cnico encargado</strong>
                    </label>
                    <InputSelect class="form-control form-select" @bind-Value ="@Cliente.TecnicoId">
                        <option value="0" selected disabled>Seleccione un T&eacute;cnico</option>
                        @foreach (var tecnico in ListaTecnicos)
                        {
                        <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                        }
                    </InputSelect>
                </div>

                @*Footer*@
                <div class="card-footer mt-2 text-center">
                    <button type="submit" class="btn btn-primary bi bi-floppy">Guardar</button>
                    <a href="/Cliente" class="btn btn-secondary"><span class="bi bi-arrow-left"></span> Retroceder</a>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int ClienteId { get; set; }
    @*Instanciar Cliente*@
    private Clientes Cliente { get; set; } = new Clientes();
    @*Lista de técnicos*@
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
    protected override async Task OnInitializedAsync()
    { 
        Cliente = await ClientesService.Buscar(ClienteId);
    ListaTecnicos = await TecnicosService.Listar(c => c.TecnicoId > 0);
    }

    @*Mensaje de Error*@
    public string MensajeError { get; set; } = string.Empty;
    
    @*Método Modificar*@
    private async Task Modificar()
    {

    if (await ValidarNombre())
    {
    MensajeError = "Ya existe un cliente con ese nombre";
    return;
    }
    if (await ValidarRnc())
    {
    MensajeError = "Ya existe un cliente con ese Rnc.";
    return;
    }
    

    var creado = await ClientesService.Guardar(Cliente);
    if (creado)
    {
    navigationManager.NavigateTo("/Cliente");
    }
    }

    @*Metodo que valida si existe Nombre*@
    public async Task<bool> ValidarNombre()
    {
    var existe = await ClientesService.ExisteNombre(Cliente.ClienteId, Cliente.Nombres);
    return existe;
    }
    
    @*Metodo que valida si existe Rnc*@
    public async Task<bool> ValidarRnc()
    {
    var existe=
    await ClientesService.ExisteRnc(Cliente.ClienteId, Cliente.Rnc);
    return existe;
    }
}
